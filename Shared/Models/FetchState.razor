@typeparam TItemType

@if (ChildContent != null)
{
    @ChildContent(DerivedState)
}

@code {

    [Parameter]
    public bool Lazy { get; set; } = true;

    [Parameter]
    public required Func<Task<TItemType>> FetcherFunctionAsync { get; set; }

    [Parameter]
    public bool Loading { get; set; }

    [Parameter]
    public EventCallback<bool> LoadingChanged { get; set; }

    [Parameter]
    public TItemType? Data { get; set; }

    [Parameter]
    public EventCallback<TItemType?> DataChanged { get; set; }

    [Parameter]
    public RenderFragment<DerivedState<TItemType>>? ChildContent { get; set; }

    private DerivedState<TItemType> DerivedState => new()
    {
        Data = Data,
        Loading = Loading
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!Lazy)
        {
            await StateFetcher();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (Lazy & firstRender)
        {
            await StateFetcher();
        }
    }

    private async Task StateFetcher()
    {
        Loading = true;
        await LoadingChanged.InvokeAsync(Loading);

        Data = await FetcherFunctionAsync.Invoke();
        await DataChanged.InvokeAsync(Data);

        Loading = false;
        await LoadingChanged.InvokeAsync(Loading);
    }

}